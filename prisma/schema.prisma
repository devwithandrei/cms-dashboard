generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native"]
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

enum OrderStatus {
  PENDING
  PAID
  SHIPPED
  DELIVERED
  CANCELLED
}

model Store {
  id           String        @id @default(uuid())
  name         String
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  userId       String
  billboards   Billboard[]   @relation("StoreToBillboard")
  categories   Category[]    @relation("StoreToCategory")
  products     Product[]     @relation("StoreToProduct")
  sizes        Size[]        @relation("StoreToSize")
  brands       Brand[]       @relation("StoreToBrand")
  descriptions Description[] @relation("StoreToDescription")
  colors       Color[]       @relation("StoreToColor")
  orders       Order[]       @relation("StoreToOrder")
}

model Billboard {
  id         String     @id @default(uuid())
  storeId    String
  label      String
  imageUrl   String
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
  store      Store      @relation("StoreToBillboard", fields: [storeId], references: [id])
  categories Category[]

  @@index([storeId])
}

model Category {
  id          String    @id @default(uuid())
  name        String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  billboardId String
  storeId     String
  store       Store     @relation("StoreToCategory", fields: [storeId], references: [id])
  billboard   Billboard @relation(fields: [billboardId], references: [id])
  products    Product[] @relation("CategoryToProduct")

  @@index([storeId])
  @@index([billboardId])
}

model Product {
  id             String         @id @default(uuid())
  name           String
  price          Decimal
  categoryId     String
  brandId        String
  descriptionId  String?
  storeId        String
  stock          Int?          // Base stock for products without variations
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  isArchived     Boolean       @default(false)
  isFeatured     Boolean       @default(false)
  store          Store         @relation("StoreToProduct", fields: [storeId], references: [id])
  category       Category      @relation("CategoryToProduct", fields: [categoryId], references: [id])
  brand          Brand         @relation(fields: [brandId], references: [id])
  description    Description?  @relation(fields: [descriptionId], references: [id])
  images         Image[]
  orderItems     OrderItem[]
  productSizes   ProductSize[]
  productColors  ProductColor[]
  stockHistories StockHistory[]
  wishlistUsers  User[]        @relation("UserToWishlist")

  @@index([storeId])
  @@index([categoryId])
  @@index([descriptionId])
  @@index([brandId])
}

model Order {
  id             String      @id @default(uuid())
  storeId        String
  store          Store       @relation("StoreToOrder", fields: [storeId], references: [id])
  orderItems     OrderItem[]
  status         OrderStatus @default(PENDING)
  phone          String      @default("")
  address        String      @default("")
  customerName   String      @default("")
  customerEmail  String      @default("")
  city           String      @default("")
  country        String      @default("")
  postalCode     String      @default("")
  amount         Decimal     @default(0)
  trackingNumber String?
  shippingMethod String?
  createdAt      DateTime    @default(now())
  updatedAt      DateTime    @updatedAt
  user           User        @relation("UserToOrder", fields: [userId], references: [id])
  userId         String
  paymentIntentId String?    // Store Stripe payment intent ID
  isPaid         Boolean     @default(false)

  @@index([storeId])
  @@index([userId])
  @@index([paymentIntentId])
}

model OrderItem {
  id        String   @id @default(uuid())
  orderId   String
  productId String
  sizeId    String?  // Optional reference to selected size
  colorId   String?  // Optional reference to selected color
  order     Order    @relation(fields: [orderId], references: [id])
  product   Product  @relation(fields: [productId], references: [id])
  size      Size?    @relation(fields: [sizeId], references: [id])
  color     Color?   @relation(fields: [colorId], references: [id])
  quantity  Int      @default(1)
  price     Decimal  // Store price at time of order

  @@index([orderId])
  @@index([productId])
  @@index([sizeId])
  @@index([colorId])
}

model Size {
  id           String        @id @default(uuid())
  name         String
  value        String
  storeId      String
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  store        Store         @relation("StoreToSize", fields: [storeId], references: [id])
  productSizes ProductSize[]
  orderItems   OrderItem[]

  @@index([storeId])
}

model Color {
  id            String         @id @default(uuid())
  name          String
  value         String
  storeId       String
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  store         Store          @relation("StoreToColor", fields: [storeId], references: [id])
  productColors ProductColor[]
  orderItems    OrderItem[]

  @@index([storeId])
}

model Brand {
  id        String    @id @default(uuid())
  name      String
  value     String    @default("")
  storeId   String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  store     Store     @relation("StoreToBrand", fields: [storeId], references: [id])
  products  Product[]

  @@index([storeId])
}

model Description {
  id        String    @id @default(uuid())
  name      String    @db.Text
  value     String    @db.Text
  storeId   String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  store     Store     @relation("StoreToDescription", fields: [storeId], references: [id])
  products  Product[]

  @@index([storeId])
}

model Image {
  id        String   @id @default(uuid())
  productId String
  url       String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@index([productId])
}

model ProductSize {
  id        String   @id @default(uuid())
  productId String
  sizeId    String
  stock     Int      @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  size      Size     @relation(fields: [sizeId], references: [id])

  @@unique([productId, sizeId])
  @@index([productId])
  @@index([sizeId])
}

model ProductColor {
  id        String   @id @default(uuid())
  productId String
  colorId   String
  stock     Int      @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  color     Color    @relation(fields: [colorId], references: [id])

  @@unique([productId, colorId])
  @@index([productId])
  @@index([colorId])
}

model StockHistory {
  id          String   @id @default(uuid())
  productId   String
  quantity    Int
  type        String   // "IN" or "OUT"
  reason      String?  // e.g., "Purchase", "Sale", "Adjustment"
  oldStock    Int?
  newStock    Int?
  changeType  String?
  createdAt   DateTime @default(now())
  product     Product  @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@index([productId])
}

model User {
  id              String    @id // This will store the Clerk user ID
  email           String    @unique
  name            String?
  orders          Order[]   @relation("UserToOrder")
  wishlistProducts Product[] @relation("UserToWishlist")
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
}
