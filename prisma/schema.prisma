generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-3.0.x"]
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model Store {
  id           String        @id @default(uuid())
  name         String
  userId       String
  billboards   Billboard[]   @relation("StoreToBillboard")
  categories   Category[]    @relation("StoreToCategory")
  products     Product[]     @relation("StoreToProduct")
  sizes        Size[]        @relation("StoreToSize")
  brands       Brand[]       @relation("StoreToBrand")
  descriptions Description[] @relation("StoreToDescription")
  colors       Color[]       @relation("StoreToColor")
  orders       Order[]       @relation("StoreToOrder")
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
}

model Billboard {
  id         String     @id @default(uuid())
  storeId    String
  store      Store      @relation("StoreToBillboard", fields: [storeId], references: [id])
  label      String
  imageUrl   String
  categories Category[]
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt

  @@index([storeId])
}

model Category {
  id          String    @id @default(uuid())
  storeId     String // Foreign Key to Store
  store       Store     @relation("StoreToCategory", fields: [storeId], references: [id])
  billboardId String // Foreign Key to Billboard
  billboard   Billboard @relation(fields: [billboardId], references: [id])
  name        String
  products    Product[] @relation("CategoryToProduct")
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@index([storeId])
  @@index([billboardId])
}

model Product {
  id            String       @id @default(uuid())
  storeId       String // Foreign Key to Store
  store         Store        @relation("StoreToProduct", fields: [storeId], references: [id])
  categoryId    String // Foreign Key to Category
  category      Category     @relation("CategoryToProduct", fields: [categoryId], references: [id])
  name          String
  price         Decimal
  isFeatured    Boolean      @default(false)
  isArchived    Boolean      @default(false)
  sizeId        String // Foreign Key to Size
  descriptionId String? // Foreign Key to Description (Nullable)
  size          Size         @relation(fields: [sizeId], references: [id])
  brandId       String // Foreign Key to Brand - Define the brandId field
  brand         Brand        @relation(fields: [brandId], references: [id]) // Define the relation to Brand
  description   Description? @relation(fields: [descriptionId], references: [id])
  colorId       String // Foreign Key to Color
  color         Color        @relation(fields: [colorId], references: [id])
  images        Image[] // Relation to Image model
  orderItems    OrderItem[] // Relation to Order model
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt

  @@index([storeId])
  @@index([categoryId])
  @@index([sizeId])
  @@index([colorId])
  @@index([descriptionId])
  @@index([brandId]) // Include brandId in indexes if required
}

model Order {
  id         String      @id @default(uuid())
  storeId    String // Foreign Key to Store
  store      Store       @relation("StoreToOrder", fields: [storeId], references: [id])
  orderItems OrderItem[] // Relation to OrderItem model
  isPaid     Boolean     @default(false)
  phone      String      @default("")
  address    String      @default("")
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt

  // âœ… Added: One-to-One relation with CustomerInfo
  customerInfo   CustomerInfo? @relation(fields: [customerInfoId], references: [id])
  customerInfoId String?       @unique

  @@index([storeId])
}

model CustomerInfo {
  id        String   @id @default(uuid())
  name      String
  email     String
  address   String
  phone     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  Order     Order? // Relation to Order model
}

model OrderItem {
  id        String  @id @default(uuid())
  orderId   String // Foreign Key to Order
  order     Order   @relation(fields: [orderId], references: [id])
  productId String // Foreign Key to Product
  product   Product @relation(fields: [productId], references: [id])

  @@index([orderId])
  @@index([productId])
}

model Size {
  id        String    @id @default(uuid())
  storeId   String // Foreign Key to Store
  store     Store     @relation("StoreToSize", fields: [storeId], references: [id])
  name      String
  value     String
  products  Product[] // Relation to Product model
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  @@index([storeId])
}

model Color {
  id        String    @id @default(uuid())
  storeId   String // Foreign Key to Store
  store     Store     @relation("StoreToColor", fields: [storeId], references: [id])
  name      String
  value     String
  products  Product[] // Relation to Product model
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  @@index([storeId])
}

model Image {
  id        String   @id @default(uuid())
  productId String // Foreign Key to Product
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  url       String // URL of the image
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([productId])
}

model Description {
  id        String    @id @default(uuid())
  storeId   String // Foreign Key to Store
  store     Store     @relation("StoreToDescription", fields: [storeId], references: [id])
  name      String
  value     String
  products  Product[] // Relation to Product model
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  @@index([storeId])
}

model Brand {
  id        String    @id @default(uuid())
  storeId   String // Foreign Key to Store
  store     Store     @relation("StoreToBrand", fields: [storeId], references: [id])
  name      String
  value     String
  products  Product[] // Relation to Product model
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  @@index([storeId])
}
