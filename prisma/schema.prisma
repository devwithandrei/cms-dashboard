generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native"]
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Store {
  id           String        @id @default(uuid())
  name         String
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  userId       String
  billboards   Billboard[]   @relation("StoreToBillboard")
  brands       Brand[]       @relation("StoreToBrand")
  categories   Category[]    @relation("StoreToCategory")
  colors       Color[]       @relation("StoreToColor")
  descriptions Description[] @relation("StoreToDescription")
  orders       Order[]       @relation("StoreToOrder")
  products     Product[]     @relation("StoreToProduct")
  sizes        Size[]        @relation("StoreToSize")
}

model Billboard {
  id         String     @id @default(uuid())
  storeId    String
  label      String
  imageUrl   String
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
  store      Store      @relation("StoreToBillboard", fields: [storeId], references: [id])
  categories Category[]

  @@index([storeId])
}

model Category {
  id          String    @id @default(uuid())
  name        String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  billboardId String
  storeId     String
  billboard   Billboard @relation(fields: [billboardId], references: [id])
  store       Store     @relation("StoreToCategory", fields: [storeId], references: [id])
  products    Product[] @relation("CategoryToProduct")

  @@index([storeId])
  @@index([billboardId])
}

model Product {
  id             String         @id @default(uuid())
  name           String
  price          Decimal
  categoryId     String
  brandId        String
  descriptionId  String?
  storeId        String
  stock          Int?
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
  isArchived     Boolean        @default(false)
  isFeatured     Boolean        @default(false)
  images         Image[]
  orderItems     OrderItem[]
  brand          Brand          @relation(fields: [brandId], references: [id])
  category       Category       @relation("CategoryToProduct", fields: [categoryId], references: [id])
  description    Description?   @relation(fields: [descriptionId], references: [id])
  store          Store          @relation("StoreToProduct", fields: [storeId], references: [id])
  productColors  ProductColor[]
  productSizes   ProductSize[]
  stockHistories StockHistory[]
  wishlistUsers  User[]         @relation("UserToWishlist")

  @@index([storeId])
  @@index([categoryId])
  @@index([descriptionId])
  @@index([brandId])
}

model Order {
  id              String      @id @default(uuid())
  storeId         String
  status          OrderStatus @default(PENDING)
  phone           String      @default("")
  address         String      @default("")
  customerName    String      @default("")
  customerEmail   String      @default("")
  city            String      @default("")
  country         String      @default("")
  postalCode      String      @default("")
  amount          Decimal     @default(0)
  trackingNumber  String?
  shippingMethod  String?
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt
  userId          String
  paymentIntentId String?
  isPaid          Boolean     @default(false)
  store           Store       @relation("StoreToOrder", fields: [storeId], references: [id])
  user            User        @relation("UserToOrder", fields: [userId], references: [id])
  orderItems      OrderItem[]

  @@index([storeId])
  @@index([userId])
  @@index([paymentIntentId])
}

model OrderItem {
  id        String  @id @default(uuid())
  orderId   String
  productId String
  sizeId    String?
  colorId   String?
  quantity  Int     @default(1)
  price     Decimal
  color     Color?  @relation(fields: [colorId], references: [id])
  order     Order   @relation(fields: [orderId], references: [id])
  product   Product @relation(fields: [productId], references: [id])
  size      Size?   @relation(fields: [sizeId], references: [id])

  @@index([orderId])
  @@index([productId])
  @@index([sizeId])
  @@index([colorId])
}

model Size {
  id           String        @id @default(uuid())
  name         String
  value        String
  storeId      String
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  orderItems   OrderItem[]
  productSizes ProductSize[]
  store        Store         @relation("StoreToSize", fields: [storeId], references: [id])

  @@index([storeId])
}

model Color {
  id            String         @id @default(uuid())
  name          String
  value         String
  storeId       String
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  store         Store          @relation("StoreToColor", fields: [storeId], references: [id])
  orderItems    OrderItem[]
  productColors ProductColor[]

  @@index([storeId])
}

model Brand {
  id        String    @id @default(uuid())
  name      String
  value     String    @default("")
  storeId   String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  store     Store     @relation("StoreToBrand", fields: [storeId], references: [id])
  products  Product[]

  @@index([storeId])
}

model Description {
  id        String    @id @default(uuid())
  name      String
  value     String
  storeId   String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  store     Store     @relation("StoreToDescription", fields: [storeId], references: [id])
  products  Product[]

  @@index([storeId])
}

model Image {
  id        String   @id @default(uuid())
  productId String
  url       String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@index([productId])
}

model ProductSize {
  id        String   @id @default(uuid())
  productId String
  sizeId    String
  stock     Int      @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  size      Size     @relation(fields: [sizeId], references: [id])

  @@unique([productId, sizeId])
  @@index([productId])
  @@index([sizeId])
}

model ProductColor {
  id        String   @id @default(uuid())
  productId String
  colorId   String
  stock     Int      @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  color     Color    @relation(fields: [colorId], references: [id])
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@unique([productId, colorId])
  @@index([productId])
  @@index([colorId])
}

model StockHistory {
  id         String   @id @default(uuid())
  productId  String
  quantity   Int
  type       String
  reason     String?
  oldStock   Int?
  newStock   Int?
  changeType String?
  createdAt  DateTime @default(now())
  product    Product  @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@index([productId])
}

model User {
  id               String    @id
  email            String    @unique
  name             String?
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt
  orders           Order[]   @relation("UserToOrder")
  wishlistProducts Product[] @relation("UserToWishlist")
}

enum OrderStatus {
  PENDING
  PAID
  SHIPPED
  DELIVERED
  CANCELLED
}
